<?php

namespace App\Http\Controllers;

use App\Models\Product;
use App\Models\Category;
use App\Models\ProductImage;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    /**
     * Display a listing of the products.
     * GET /api/products
     */
    public function index(Request $request)
    {
        try {
            // Query dasar dengan eager loading
            $query = Product::with(['category', 'images'])
                        ->active() // Scope aktif
                        ->inStock(); // Scope stok tersedia

            // Filter by category
            if ($request->has('category_id')) {
                $query->where('category_id', $request->category_id);
            }

            // Search by product name
            if ($request->has('search')) {
                $query->where('product_name', 'like', '%' . $request->search . '%');
            }

            // Sorting
            $sortBy = $request->get('sort_by', 'created_at');
            $sortOrder = $request->get('sort_order', 'desc');
            $query->orderBy($sortBy, $sortOrder);

            // Pagination
            $perPage = $request->get('per_page', 10);
            $products = $query->paginate($perPage);

            return response()->json([
                'success' => true,
                'data' => $products,
                'message' => 'Products retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve products',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Display the specified product.
     * GET /api/products/{id}
     */
    public function show($id)
    {
        try {
            $product = Product::with(['category', 'images'])
                        ->active()
                        ->find($id);

            if (!$product) {
                return response()->json([
                    'success' => false,
                    'message' => 'Product not found'
                ], 404);
            }

            return response()->json([
                'success' => true,
                'data' => $product,
                'message' => 'Product retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve product',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get products by category.
     * GET /api/categories/{categoryId}/products
     */
    public function getByCategory($categoryId, Request $request)
    {
        try {
            $category = Category::find($categoryId);
            
            if (!$category) {
                return response()->json([
                    'success' => false,
                    'message' => 'Category not found'
                ], 404);
            }

            $query = Product::with(['category', 'images'])
                        ->where('category_id', $categoryId)
                        ->active()
                        ->inStock();

            // Search dalam kategori
            if ($request->has('search')) {
                $query->where('product_name', 'like', '%' . $request->search . '%');
            }

            $perPage = $request->get('per_page', 10);
            $products = $query->paginate($perPage);

            return response()->json([
                'success' => true,
                'data' => [
                    'category' => $category,
                    'products' => $products
                ],
                'message' => 'Products by category retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve products by category',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Search products.
     * GET /api/products/search?q={keyword}
     */
    public function search(Request $request)
    {
        try {
            $keyword = $request->get('q');
            
            if (!$keyword) {
                return response()->json([
                    'success' => false,
                    'message' => 'Search keyword is required'
                ], 400);
            }

            $products = Product::with(['category', 'images'])
                        ->where('product_name', 'like', '%' . $keyword . '%')
                        ->orWhere('description', 'like', '%' . $keyword . '%')
                        ->active()
                        ->inStock()
                        ->paginate(10);

            return response()->json([
                'success' => true,
                'data' => $products,
                'message' => 'Search results retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Search failed',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get featured products (contoh logic sederhana)
     * GET /api/products/featured
     */
    public function featured()
    {
        try {
            $featuredProducts = Product::with(['category', 'images'])
                                ->active()
                                ->inStock()
                                ->orderBy('created_at', 'desc')
                                ->limit(8)
                                ->get();

            return response()->json([
                'success' => true,
                'data' => $featuredProducts,
                'message' => 'Featured products retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to retrieve featured products',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    
}