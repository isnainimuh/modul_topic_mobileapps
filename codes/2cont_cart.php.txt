<?php

namespace App\Http\Controllers;

use App\Models\Cart;
use App\Models\CartItem;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class CartController extends Controller
{
    /**
     * Get user cart
     */
    public function getCart($userId)
    {
        try {
            $cart = Cart::with(['items.product.images'])
                    ->where('user_id', $userId)
                    ->first();

            if (!$cart) {
                return response()->json([
                    'success' => true,
                    'data' => ['items' => []],
                    'message' => 'Cart is empty'
                ]);
            }

            return response()->json([
                'success' => true,
                'data' => $cart,
                'message' => 'Cart retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to get cart',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Add item to cart
     */
    public function addToCart(Request $request, $userId)
    {
        try {
            DB::beginTransaction();

            $request->validate([
                'product_id' => 'required|exists:products,product_id',
                'quantity' => 'required|integer|min:1'
            ]);

            // Check product stock
            $product = Product::find($request->product_id);
            if ($product->stock_quantity < $request->quantity) {
                return response()->json([
                    'success' => false,
                    'message' => 'Insufficient stock'
                ], 400);
            }

            // Find or create cart
            $cart = Cart::firstOrCreate(
                ['user_id' => $userId],
                ['user_id' => $userId]
            );

            // Check if product already in cart
            $existingItem = CartItem::where('cart_id', $cart->cart_id)
                            ->where('product_id', $request->product_id)
                            ->first();

            if ($existingItem) {
                $newQuantity = $existingItem->quantity + $request->quantity;
                
                // Check stock again with new quantity
                if ($product->stock_quantity < $newQuantity) {
                    return response()->json([
                        'success' => false,
                        'message' => 'Insufficient stock for requested quantity'
                    ], 400);
                }

                $existingItem->quantity = $newQuantity;
                $existingItem->save();
            } else {
                CartItem::create([
                    'cart_id' => $cart->cart_id,
                    'product_id' => $request->product_id,
                    'quantity' => $request->quantity
                ]);
            }

            DB::commit();

            // Return updated cart
            $updatedCart = Cart::with(['items.product.images'])
                          ->where('user_id', $userId)
                          ->first();

            return response()->json([
                'success' => true,
                'data' => $updatedCart,
                'message' => 'Product added to cart successfully'
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => 'Failed to add product to cart',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Update cart item quantity
     */
    public function updateCartItem(Request $request, $userId)
    {
        try {
            $request->validate([
                'product_id' => 'required|exists:products,product_id',
                'quantity' => 'required|integer|min:1'
            ]);

            // Check product stock
            $product = Product::find($request->product_id);
            if ($product->stock_quantity < $request->quantity) {
                return response()->json([
                    'success' => false,
                    'message' => 'Insufficient stock'
                ], 400);
            }

            $cart = Cart::where('user_id', $userId)->first();

            if (!$cart) {
                return response()->json([
                    'success' => false,
                    'message' => 'Cart not found'
                ], 404);
            }

            $cartItem = CartItem::where('cart_id', $cart->cart_id)
                        ->where('product_id', $request->product_id)
                        ->first();

            if (!$cartItem) {
                return response()->json([
                    'success' => false,
                    'message' => 'Product not found in cart'
                ], 404);
            }

            $cartItem->quantity = $request->quantity;
            $cartItem->save();

            // Return updated cart
            $updatedCart = Cart::with(['items.product.images'])
                          ->where('user_id', $userId)
                          ->first();

            return response()->json([
                'success' => true,
                'data' => $updatedCart,
                'message' => 'Cart updated successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to update cart',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Remove item from cart
     */
    public function removeFromCart(Request $request, $userId)
    {
        try {
            $request->validate([
                'product_id' => 'required|exists:products,product_id'
            ]);

            $cart = Cart::where('user_id', $userId)->first();

            if (!$cart) {
                return response()->json([
                    'success' => false,
                    'message' => 'Cart not found'
                ], 404);
            }

            CartItem::where('cart_id', $cart->cart_id)
                    ->where('product_id', $request->product_id)
                    ->delete();

            // Return updated cart
            $updatedCart = Cart::with(['items.product.images'])
                          ->where('user_id', $userId)
                          ->first();

            return response()->json([
                'success' => true,
                'data' => $updatedCart,
                'message' => 'Product removed from cart successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to remove product from cart',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Clear cart
     */
    public function clearCart($userId)
    {
        try {
            $cart = Cart::where('user_id', $userId)->first();

            if (!$cart) {
                return response()->json([
                    'success' => false,
                    'message' => 'Cart not found'
                ], 404);
            }

            CartItem::where('cart_id', $cart->cart_id)->delete();

            return response()->json([
                'success' => true,
                'data' => ['items' => []],
                'message' => 'Cart cleared successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to clear cart',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get cart summary (total items, total price)
     */
    public function getCartSummary($userId)
    {
        try {
            $cart = Cart::with('items.product')
                    ->where('user_id', $userId)
                    ->first();

            if (!$cart || $cart->items->isEmpty()) {
                return response()->json([
                    'success' => true,
                    'data' => [
                        'total_items' => 0,
                        'total_price' => 0
                    ]
                ]);
            }

            $totalItems = 0;
            $totalPrice = 0;

            foreach ($cart->items as $item) {
                $totalItems += $item->quantity;
                $totalPrice += $item->quantity * $item->product->price;
            }

            return response()->json([
                'success' => true,
                'data' => [
                    'total_items' => $totalItems,
                    'total_price' => $totalPrice
                ],
                'message' => 'Cart summary retrieved successfully'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to get cart summary',
                'error' => $e->getMessage()
            ], 500);
        }
    }
}