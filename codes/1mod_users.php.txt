<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    // Tentukan primary key custom
    protected $primaryKey = 'user_id';

    // Tentukan nama tabel (optional)
    protected $table = 'users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'username',       // Ganti 'name' jadi 'username'
        'email',
        'password_hash',  // Ganti 'password' jadi 'password_hash'
        'phone_number',   // Tambahkan field baru
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password_hash',  // Ganti 'password' jadi 'password_hash'
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    // **WAJIB: Override method untuk Sanctum**
    
    /**
     * Get the password for the user.
     * Sanctum butuh ini untuk authentication
     */
    public function getAuthPassword()
    {
        return $this->password_hash;
    }

    /**
     * Get the name of the unique identifier for the user.
     * Sanctum butuh ini
     */
    public function getAuthIdentifierName()
    {
        return 'user_id';
    }

    // **Relationships untuk e-commerce**
    
    public function cart()
    {
        return $this->hasOne(Cart::class, 'user_id', 'user_id');
    }

    public function orders()
    {
        return $this->hasMany(Order::class, 'user_id', 'user_id');
    }

    public function addresses()
    {
        return $this->hasMany(Address::class, 'user_id', 'user_id');
    }
}